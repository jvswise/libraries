/** MIT License
*
* Copyright(c) 2017 DevDuino
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files(the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions :
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/

#include "adafruitFont.h"

	//This byte array is copied (and bits have ben reverted to match our code) from the Adafruit font under BSD license: 
	//https://github.com/adafruit/Adafruit-GFX-Library/blob/master/glcdfont.c.
	const uint8_t AdafruitFont::glyphsBuffer[95][5] PROGMEM = {
		{ 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0xfa, 0x00, 0x00 },
		{ 0x00, 0xe0, 0x00, 0xe0, 0x00 },
		{ 0x28, 0xfe, 0x28, 0xfe, 0x28 },
		{ 0x24, 0x54, 0xfe, 0x54, 0x48 },
		{ 0xc4, 0xc8, 0x10, 0x26, 0x46 },
		{ 0x6c, 0x92, 0x6a, 0x04, 0x0a },
		{ 0x00, 0x10, 0xe0, 0xc0, 0x00 },
		{ 0x00, 0x38, 0x44, 0x82, 0x00 },
		{ 0x00, 0x82, 0x44, 0x38, 0x00 },
		{ 0x54, 0x38, 0xfe, 0x38, 0x54 },
		{ 0x10, 0x10, 0x7c, 0x10, 0x10 },
		{ 0x00, 0x01, 0x0e, 0x0c, 0x00 },
		{ 0x10, 0x10, 0x10, 0x10, 0x10 },
		{ 0x00, 0x00, 0x06, 0x06, 0x00 },
		{ 0x04, 0x08, 0x10, 0x20, 0x40 },
		{ 0x7c, 0x8a, 0x92, 0xa2, 0x7c },
		{ 0x00, 0x42, 0xfe, 0x02, 0x00 },
		{ 0x4e, 0x92, 0x92, 0x92, 0x62 },
		{ 0x84, 0x82, 0x92, 0xb2, 0xcc },
		{ 0x18, 0x28, 0x48, 0xfe, 0x08 },
		{ 0xe4, 0xa2, 0xa2, 0xa2, 0x9c },
		{ 0x3c, 0x52, 0x92, 0x92, 0x8c },
		{ 0x82, 0x84, 0x88, 0x90, 0xe0 },
		{ 0x6c, 0x92, 0x92, 0x92, 0x6c },
		{ 0x62, 0x92, 0x92, 0x94, 0x78 },
		{ 0x00, 0x00, 0x28, 0x00, 0x00 },
		{ 0x00, 0x02, 0x2c, 0x00, 0x00 },
		{ 0x00, 0x10, 0x28, 0x44, 0x82 },
		{ 0x28, 0x28, 0x28, 0x28, 0x28 },
		{ 0x00, 0x82, 0x44, 0x28, 0x10 },
		{ 0x40, 0x80, 0x9a, 0x90, 0x60 },
		{ 0x7c, 0x82, 0xba, 0x9a, 0x72 },
		{ 0x3e, 0x48, 0x88, 0x48, 0x3e },
		{ 0xfe, 0x92, 0x92, 0x92, 0x6c },
		{ 0x7c, 0x82, 0x82, 0x82, 0x44 },
		{ 0xfe, 0x82, 0x82, 0x82, 0x7c },
		{ 0xfe, 0x92, 0x92, 0x92, 0x82 },
		{ 0xfe, 0x90, 0x90, 0x90, 0x80 },
		{ 0x7c, 0x82, 0x82, 0x8a, 0xce },
		{ 0xfe, 0x10, 0x10, 0x10, 0xfe },
		{ 0x00, 0x82, 0xfe, 0x82, 0x00 },
		{ 0x04, 0x02, 0x82, 0xfc, 0x80 },
		{ 0xfe, 0x10, 0x28, 0x44, 0x82 },
		{ 0xfe, 0x02, 0x02, 0x02, 0x02 },
		{ 0xfe, 0x40, 0x38, 0x40, 0xfe },
		{ 0xfe, 0x20, 0x10, 0x08, 0xfe },
		{ 0x7c, 0x82, 0x82, 0x82, 0x7c },
		{ 0xfe, 0x90, 0x90, 0x90, 0x60 },
		{ 0x7c, 0x82, 0x8a, 0x84, 0x7a },
		{ 0xfe, 0x90, 0x98, 0x94, 0x62 },
		{ 0x64, 0x92, 0x92, 0x92, 0x4c },
		{ 0xc0, 0x80, 0xfe, 0x80, 0xc0 },
		{ 0xfc, 0x02, 0x02, 0x02, 0xfc },
		{ 0xf8, 0x04, 0x02, 0x04, 0xf8 },
		{ 0xfc, 0x02, 0x1c, 0x02, 0xfc },
		{ 0xc6, 0x28, 0x10, 0x28, 0xc6 },
		{ 0xc0, 0x20, 0x1e, 0x20, 0xc0 },
		{ 0x86, 0x9a, 0x92, 0xb2, 0xc2 },
		{ 0x00, 0xfe, 0x82, 0x82, 0x82 },
		{ 0x40, 0x20, 0x10, 0x08, 0x04 },
		{ 0x00, 0x82, 0x82, 0x82, 0xfe },
		{ 0x20, 0x40, 0x80, 0x40, 0x20 },
		{ 0x02, 0x02, 0x02, 0x02, 0x02 },
		{ 0x00, 0xc0, 0xe0, 0x10, 0x00 },
		{ 0x04, 0x2a, 0x2a, 0x1e, 0x02 },
		{ 0xfe, 0x14, 0x22, 0x22, 0x1c },
		{ 0x1c, 0x22, 0x22, 0x22, 0x14 },
		{ 0x1c, 0x22, 0x22, 0x14, 0xfe },
		{ 0x1c, 0x2a, 0x2a, 0x2a, 0x18 },
		{ 0x00, 0x10, 0x7e, 0x90, 0x40 },
		{ 0x18, 0x25, 0x25, 0x39, 0x1e },
		{ 0xfe, 0x10, 0x20, 0x20, 0x1e },
		{ 0x00, 0x22, 0xbe, 0x02, 0x00 },
		{ 0x04, 0x02, 0x02, 0xbc, 0x00 },
		{ 0xfe, 0x08, 0x14, 0x22, 0x00 },
		{ 0x00, 0x82, 0xfe, 0x02, 0x00 },
		{ 0x3e, 0x20, 0x1e, 0x20, 0x1e },
		{ 0x3e, 0x10, 0x20, 0x20, 0x1e },
		{ 0x1c, 0x22, 0x22, 0x22, 0x1c },
		{ 0x3f, 0x18, 0x24, 0x24, 0x18 },
		{ 0x18, 0x24, 0x24, 0x18, 0x3f },
		{ 0x3e, 0x10, 0x20, 0x20, 0x10 },
		{ 0x12, 0x2a, 0x2a, 0x2a, 0x24 },
		{ 0x20, 0x20, 0xfc, 0x22, 0x24 },
		{ 0x3c, 0x02, 0x02, 0x04, 0x3e },
		{ 0x38, 0x04, 0x02, 0x04, 0x38 },
		{ 0x3c, 0x02, 0x0c, 0x02, 0x3c },
		{ 0x22, 0x14, 0x08, 0x14, 0x22 },
		{ 0x32, 0x09, 0x09, 0x09, 0x3e },
		{ 0x22, 0x26, 0x2a, 0x32, 0x22 },
		{ 0x00, 0x10, 0x6c, 0x82, 0x00 },
		{ 0x00, 0x00, 0xee, 0x00, 0x00 },
		{ 0x00, 0x82, 0x6c, 0x10, 0x00 },
		{ 0x40, 0x80, 0x40, 0x20, 0x40 }
	};
	//------------------------------------------------------------------------//
	//---------------------------- Public methods ----------------------------//
	//------------------------------------------------------------------------//
	uint8_t AdafruitFont::getSize() {
		return 7;
	}

	uint8_t AdafruitFont::getGlyphWidth(uint8_t characterCode) {
		return 5;
	}

	uint8_t AdafruitFont::getGlyphHeight(uint8_t characterCode) {
		return 7;
	}

	const uint8_t* AdafruitFont::getGlyphPixels(uint8_t characterCode) {
		return (&glyphsBuffer[characterCode - 32][0]);
	}

	int8_t AdafruitFont::getGlyphKerning(uint8_t characterCode, uint8_t previousCharacterCode) {
		return 0;
	}

	uint8_t AdafruitFont::getGlyphXAdvance(uint8_t characterCode) {
		return 6;
	}

	int8_t AdafruitFont::getGlyphXOffset(uint8_t characterCode) {
		return 0;
	}

	int8_t AdafruitFont::getGlyphYOffset(uint8_t characterCode) {
		return 0;
	}

	//------------------------------------------------------------------------//
	//---------------------------- Private methods ---------------------------//
	//------------------------------------------------------------------------//
